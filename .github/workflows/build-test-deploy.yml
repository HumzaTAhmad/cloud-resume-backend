name: build, test, deploy infrastructure in AWS

on: [push]

jobs:
  build-dev:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v2
      
      - name: Zip the Lambda function
        run: zip lambda_update_visits.zip lambda_update_visits.py
      
      - name: Upload Lambda ZIP to Artifacts
        uses: actions/upload-artifact@v2
        with:
          name: lambda_function_zip
          path: lambda_update_visits.zip
            

  build-dev-aws:
    needs:  build-dev
    runs-on: ubuntu-latest
    outputs:
      api_url: ${{ steps.get_url.outputs.api_url }}
    steps:    
      - name: Checkout Code
        uses: actions/checkout@v2
      
      - name: configure Terraform cloudcredentials
        uses: hashicorp/setup-terraform@v1
        with:
          cli_config_credentials_token: ${{ secrets.TF_CLOUD_API_TOKEN }}

      - name: Download Lambda ZIP from Artifacts
        uses: actions/download-artifact@v2
        with:
          name: lambda_function_zip
          path: .

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.TEST_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.TEST_AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
      
      - name: Set Terraform Workspace to test
        run: echo "TF_WORKSPACE=resume-backend-test" >> $GITHUB_ENV

      - name: Terraform Init
        run: terraform init -input=false

      - name: Terraform Refresh
        run: terraform refresh
      
      - name: Terraform Plan
        run: terraform plan
      
      - name: Terraform Apply
        run: terraform apply -auto-approve
      
      - name: Get API Gateway URL
        id: get_url
        run: |
          API_URL=$(terraform output -raw api_gateway_stage_url | grep -o 'https://[^ ]*' | sed 's/::.*//' | head -n 1)
          echo "API_URL=$API_URL" >> $GITHUB_ENV
          echo "api_url=$API_URL" >> $GITHUB_OUTPUT
          echo "API ISISSSSSS $API_URL"
        
      
        
      
  
  test-dev:
    needs: build-dev-aws
    runs-on: ubuntu-latest
    environment:  # Define the environment that requires a manual approval.
      name: prod
    steps:

      - name: Checkout Code
        uses: actions/checkout@v2

      - name: configure Terraform cloudcredentials
        uses: hashicorp/setup-terraform@v1
        with:
          cli_config_credentials_token: ${{ secrets.TF_CLOUD_API_TOKEN }}  
        
      - name: Setup Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '20'

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.TEST_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.TEST_AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1      
      
      - name: Install dependencies
        run: npm install
        
      - name: Install cypress
        run: npm install -g cypress
      
      - name: Echo API URL
        run: echo "API_URL is set to ${{ needs.build-dev-aws.outputs.api_url }}"  
      
      - name: Run Cypress tests
        run: npx cypress run --env API_URL=${{ needs.build-dev-aws.outputs.api_url }}

      - name: Set Terraform Workspace to test
        run: echo "TF_WORKSPACE=resume-backend-test" >> $GITHUB_ENV

      - name: Terraform Init
        run: terraform init -input=false
  
      - name: Terraform destroy
        run: terraform destroy -auto-approve

  build-prod:
    needs: test-dev
    runs-on: ubuntu-latest
    environment:  # Define the environment that requires a manual approval.
      name: prod
    steps:
      - name: Checkout Code
        uses: actions/checkout@v2
      
      - name: Zip the Lambda function
        run: zip lambda_update_visits.zip lambda_update_visits.py
      
      - name: Upload Lambda ZIP to Artifacts
        uses: actions/upload-artifact@v2
        with:
          name: lambda_function_zip
          path: lambda_update_visits.zip
                    
        
  build-prod-aws:
    needs:  build-prod
    runs-on: ubuntu-latest
    outputs:
      api_url_prod: ${{ steps.get_url.outputs.api_url_prod }}
    steps:    
      - name: Checkout Code
        uses: actions/checkout@v2
      
      - name: configure Terraform cloud credentials
        uses: hashicorp/setup-terraform@v1
        with:
          cli_config_credentials_token: ${{ secrets.TF_CLOUD_API_TOKEN }}

      - name: Download Lambda ZIP from Artifacts
        uses: actions/download-artifact@v2
        with:
          name: lambda_function_zip
          path: .

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
      
      - name: Set Terraform Workspace
        run: echo "TF_WORKSPACE=resume-backend-prod" >> $GITHUB_ENV

      - name: Terraform Init
        run: terraform init -input=false

      - name: Terraform Refresh
        run: terraform refresh
      
      - name: Terraform Plan
        run: terraform plan
      
      - name: Terraform Apply
        run: terraform apply -auto-approve
      
      - name: Get API Gateway URL
        id: get_url
        run: |
          API_URL_prod=$(terraform output -raw api_gateway_stage_url | grep -o 'https://[^ ]*' | sed 's/::.*//' | head -n 1)
          echo "API_URL_prod=$API_URL_prod" >> $GITHUB_ENV
          echo "api_url_prod=$API_URL_prod" >> $GITHUB_OUTPUT
          echo "API ISISSSSSS $API_URL"
      
          
  test-prod:
    needs: build-prod-aws
    runs-on: ubuntu-latest
    environment:  # Define the environment that requires a manual approval.
     name: prod
    steps:
      

      - name: Checkout Code
        uses: actions/checkout@v2
        
      - name: Setup Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '20'
      
      - name: Install dependencies
        run: npm install
      
        
      - name: Install cypress
        run: npm install -g cypress 

      - name: Run Cypress tests
        run: npx cypress run --env API_URL=${{ needs.build-prod-aws.outputs.api_url_prod }}
      


      